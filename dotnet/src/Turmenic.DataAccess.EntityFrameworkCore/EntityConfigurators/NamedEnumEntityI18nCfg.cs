using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Turmenic.DataAccess.EntityFrameworkCore.Entities;

namespace Turmenic.DataAccess.EntityFrameworkCore.EntityConfigurators
{
    public class DefaultPkNamedEnumEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId> : DefaultPkEnumEntityCfg<TEntity, TEntityId>
        where TEntity : NamedEnumEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
    {
        public DefaultPkNamedEnumEntityI18nCfg(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class CustomGeneratedPkNamedEnumEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId> : CustomGeneratedPkEnumEntityCfg<TEntity, TEntityId>
        where TEntity : NamedEnumEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
    {
        public CustomGeneratedPkNamedEnumEntityI18nCfg(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class DbAutoGeneratedPkNamedEnumEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId> : DbAutoGeneratedPkEnumEntityCfg<TEntity, TEntityId>
        where TEntity : NamedEnumEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityId : struct
    {
        public DbAutoGeneratedPkNamedEnumEntityI18nCfg(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedPkNamedEnumEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TValueGenerator> : ClientAutoGeneratedPkEnumEntityCfg<TEntity, TEntityId, TValueGenerator>
        where TEntity : NamedEnumEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TValueGenerator : ValueGenerator
    {
        public ClientAutoGeneratedPkNamedEnumEntityI18nCfg(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedStringPkNamedEnumEntityI18nCfg<TEntity, TEntityName, TEntityNameId> : ClientAutoGeneratedStringPkEnumEntityCfg<TEntity>
        where TEntity : NamedEnumEntityI18nBase<TEntity, string, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, string, TEntityName, TEntityNameId>
    {
        public ClientAutoGeneratedStringPkNamedEnumEntityI18nCfg(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }
}
