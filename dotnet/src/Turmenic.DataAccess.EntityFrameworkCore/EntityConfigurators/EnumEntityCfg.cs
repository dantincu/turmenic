using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Turmenic.DataAccess.EntityFrameworkCore.Config;
using Turmenic.DataAccess.EntityFrameworkCore.Entities;

namespace Turmenic.DataAccess.EntityFrameworkCore.EntityConfigurators
{
    public class DefaultPkEnumEntityCfg<TEnumEntity, TId> : DefaultPkEntityCfgBase<TEnumEntity, TId>
        where TEnumEntity : EnumEntityBase<TId>
    {
        public DefaultPkEnumEntityCfg(EntityTypeBuilder<TEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsEnumNameRequired => true;
        protected virtual bool IsEnumValRequired => true;

        protected override void Configure(EntityTypeBuilder<TEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.EnumName).IsRequired(this.IsEnumNameRequired);
            entityTypeBuilder.Property(e => e.EnumVal).IsRequired(this.IsEnumValRequired);
        }
    }

    public class CustomGeneratedPkEnumEntityCfg<TEnumEntity, TId> : CustomGeneratedPkEntityCfgBase<TEnumEntity, TId>
        where TEnumEntity : EnumEntityBase<TId>
    {
        public CustomGeneratedPkEnumEntityCfg(EntityTypeBuilder<TEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsEnumNameRequired => true;
        protected virtual bool IsEnumValRequired => true;

        protected override void Configure(EntityTypeBuilder<TEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.EnumName).IsRequired(this.IsEnumNameRequired);
            entityTypeBuilder.Property(e => e.EnumVal).IsRequired(this.IsEnumValRequired);
        }
    }

    public class DbAutoGeneratedPkEnumEntityCfg<TEnumEntity, TId> : DbAutoGeneratedPkEntityCfgBase<TEnumEntity, TId>
        where TEnumEntity : EnumEntityBase<TId>
        where TId : struct
    {
        public DbAutoGeneratedPkEnumEntityCfg(EntityTypeBuilder<TEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsEnumNameRequired => true;
        protected virtual bool IsEnumValRequired => true;

        protected override void Configure(EntityTypeBuilder<TEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.EnumName).IsRequired(this.IsEnumNameRequired);
            entityTypeBuilder.Property(e => e.EnumVal).IsRequired(this.IsEnumValRequired);
        }
    }

    public class ClientAutoGeneratedPkEnumEntityCfg<TEnumEntity, TId, TValueGenerator> : ClientAutoGeneratedPkEntityCfgBase<TEnumEntity, TId, TValueGenerator>
        where TEnumEntity : EnumEntityBase<TId>
        where TValueGenerator : ValueGenerator
    {
        public ClientAutoGeneratedPkEnumEntityCfg(EntityTypeBuilder<TEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsEnumNameRequired => true;
        protected virtual bool IsEnumValRequired => true;

        protected override void Configure(EntityTypeBuilder<TEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.EnumName).IsRequired(this.IsEnumNameRequired);
            entityTypeBuilder.Property(e => e.EnumVal).IsRequired(this.IsEnumValRequired);
        }
    }

    public class ClientAutoGeneratedStringPkEnumEntityCfg<TEnumEntity> : ClientAutoGeneratedStringPkEntityCfgBase<TEnumEntity>
        where TEnumEntity : EnumEntityBase<string>
    {
        public ClientAutoGeneratedStringPkEnumEntityCfg(EntityTypeBuilder<TEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsEnumNameRequired => true;
        protected virtual bool IsEnumValRequired => true;

        protected override void Configure(EntityTypeBuilder<TEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.EnumName).IsRequired(this.IsEnumNameRequired);
            entityTypeBuilder.Property(e => e.EnumVal).IsRequired(this.IsEnumValRequired);
        }
    }
}
