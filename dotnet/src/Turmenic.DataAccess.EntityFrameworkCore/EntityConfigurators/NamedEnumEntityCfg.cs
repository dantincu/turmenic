using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Turmenic.DataAccess.EntityFrameworkCore.Entities;

namespace Turmenic.DataAccess.EntityFrameworkCore.EntityConfigurators
{
    public class DefaultPkNamedEnumEntityCfg<TNamedEnumEntity, TId> : DefaultPkEnumEntityCfg<TNamedEnumEntity, TId>
        where TNamedEnumEntity : NamedEnumEntityBase<TId>
    {
        public DefaultPkNamedEnumEntityCfg(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class CustomGeneratedPkNamedEnumEntityCfg<TNamedEnumEntity, TId> : CustomGeneratedPkEnumEntityCfg<TNamedEnumEntity, TId>
        where TNamedEnumEntity : NamedEnumEntityBase<TId>
    {
        public CustomGeneratedPkNamedEnumEntityCfg(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class DbAutoGeneratedPkNamedEnumEntityCfg<TNamedEnumEntity, TId> : DbAutoGeneratedPkEnumEntityCfg<TNamedEnumEntity, TId>
        where TNamedEnumEntity : NamedEnumEntityBase<TId>
        where TId : struct
    {
        public DbAutoGeneratedPkNamedEnumEntityCfg(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedPkNamedEnumEntityCfg<TNamedEnumEntity, TId, TValueGenerator>
        : ClientAutoGeneratedPkEnumEntityCfg<TNamedEnumEntity, TId, TValueGenerator>
        where TNamedEnumEntity : NamedEnumEntityBase<TId>
        where TValueGenerator : ValueGenerator
    {
        public ClientAutoGeneratedPkNamedEnumEntityCfg(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedStringPkNamedEnumEntityCfg<TNamedEnumEntity> : ClientAutoGeneratedStringPkEnumEntityCfg<TNamedEnumEntity>
        where TNamedEnumEntity : NamedEnumEntityBase<string>
    {
        public ClientAutoGeneratedStringPkNamedEnumEntityCfg(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEnumEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }
}
