using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Turmenic.DataAccess.EntityFrameworkCore.Config;
using Turmenic.DataAccess.EntityFrameworkCore.Entities;

namespace Turmenic.DataAccess.EntityFrameworkCore.EntityConfigurators
{
    public class DefaultPkNamedEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts>
        : DefaultPkEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts>
        where TEntity : NamedEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TCfgOpts : NamedEntityI18nCfgOpts<TEntity, TEntityId, TEntityName, TEntityNameId>
    {
        public DefaultPkNamedEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class CustomGeneratedPkNamedEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts>
        : CustomGeneratedPkEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts>
        where TEntity : NamedEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TCfgOpts : NamedEntityI18nCfgOpts<TEntity, TEntityId, TEntityName, TEntityNameId>
    {
        public CustomGeneratedPkNamedEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class DbAutoGeneratedPkNamedEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts>
        : DbAutoGeneratedPkEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts>
        where TEntity : NamedEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityId : struct
        where TCfgOpts : NamedEntityI18nCfgOpts<TEntity, TEntityId, TEntityName, TEntityNameId>
    {
        public DbAutoGeneratedPkNamedEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedPkNamedEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts, TValueGenerator>
        : ClientAutoGeneratedPkEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts, TValueGenerator>
        where TEntity : NamedEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TCfgOpts : NamedEntityI18nCfgOpts<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TValueGenerator : ValueGenerator
    {
        public ClientAutoGeneratedPkNamedEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedStringPkNamedEntityI18nCfg<TEntity, TEntityName, TEntityNameId, TCfgOpts>
        : ClientAutoGeneratedStringPkEntityI18nCfg<TEntity, TEntityName, TEntityNameId, TCfgOpts>
        where TEntity : NamedEntityI18nBase<TEntity, string, TEntityName, TEntityNameId>
        where TEntityName : EntityNameI18nBase<TEntity, string, TEntityName, TEntityNameId>
        where TCfgOpts : NamedEntityI18nCfgOpts<TEntity, string, TEntityName, TEntityNameId>
    {
        public ClientAutoGeneratedStringPkNamedEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }
}
