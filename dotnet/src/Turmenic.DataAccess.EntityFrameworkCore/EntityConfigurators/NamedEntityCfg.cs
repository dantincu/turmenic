using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Turmenic.DataAccess.EntityFrameworkCore.Config;
using Turmenic.DataAccess.EntityFrameworkCore.Entities;

namespace Turmenic.DataAccess.EntityFrameworkCore.EntityConfigurators
{
    public class DefaultPkNamedEntityCfg<TEntity, TEntityId, TCfgOpts> : DefaultPkEntityCfgBase<TEntity, TEntityId, TCfgOpts>
        where TEntity : NamedEntityBase<TEntityId>
        where TCfgOpts : NamedEntityCfgOpts<TEntity, TEntityId>
    {
        public DefaultPkNamedEntityCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEntityConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class CustomGeneratedPkNamedEntityCfg<TEntity, TEntityId, TCfgOpts> : CustomGeneratedPkEntityCfgBase<TEntity, TEntityId, TCfgOpts>
        where TEntity : NamedEntityBase<TEntityId>
        where TCfgOpts : NamedEntityCfgOpts<TEntity, TEntityId>
    {
        public CustomGeneratedPkNamedEntityCfg(EntityTypeBuilder<TEntity> entityTypeBuilder, TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEntityConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class DbAutoGeneratedPkNamedEntityCfg<TEntity, TEntityId, TCfgOpts> : DbAutoGeneratedPkEntityCfgBase<TEntity, TEntityId, TCfgOpts>
        where TEntity : NamedEntityBase<TEntityId>
        where TEntityId : struct
        where TCfgOpts : NamedEntityCfgOpts<TEntity, TEntityId>
    {
        public DbAutoGeneratedPkNamedEntityCfg(EntityTypeBuilder<TEntity> entityTypeBuilder, TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEntityConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedPkNamedEntityCfg<TEntity, TEntityId, TCfgOpts, TValueGenerator>
        : ClientAutoGeneratedPkEntityCfgBase<TEntity, TEntityId, TCfgOpts, TValueGenerator>
        where TEntity : NamedEntityBase<TEntityId>
        where TCfgOpts : NamedEntityCfgOpts<TEntity, TEntityId>
        where TValueGenerator : ValueGenerator
    {
        public ClientAutoGeneratedPkNamedEntityCfg(EntityTypeBuilder<TEntity> entityTypeBuilder, TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder); 
            
            HelperMethods.AddNamedEntityConfig(
                 entityTypeBuilder,
                 this.EntityCfgOptions,
                 this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedStringPkNamedEntityCfg<TEntity, TCfgOpts> : ClientAutoGeneratedStringPkEntityCfgBase<TEntity, TCfgOpts>
        where TEntity : NamedEntityBase<string>
        where TCfgOpts : NamedEntityCfgOpts<TEntity, string>
    {
        public ClientAutoGeneratedStringPkNamedEntityCfg(EntityTypeBuilder<TEntity> entityTypeBuilder, TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEntityConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }
}
