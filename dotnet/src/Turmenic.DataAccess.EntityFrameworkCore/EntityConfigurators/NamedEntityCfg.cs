using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Turmenic.DataAccess.EntityFrameworkCore.Config;
using Turmenic.DataAccess.EntityFrameworkCore.Entities;

namespace Turmenic.DataAccess.EntityFrameworkCore.EntityConfigurators
{
    public class DefaultPkNamedEntityCfg<TNamedEntity, TId> : DefaultPkEntityCfgBase<TNamedEntity, TId>
        where TNamedEntity : NamedEntityBase<TId>
    {
        public DefaultPkNamedEntityCfg(EntityTypeBuilder<TNamedEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class CustomGeneratedPkNamedEntityCfg<TNamedEntity, TId> : CustomGeneratedPkEntityCfgBase<TNamedEntity, TId>
        where TNamedEntity : NamedEntityBase<TId>
    {
        public CustomGeneratedPkNamedEntityCfg(EntityTypeBuilder<TNamedEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class DbAutoGeneratedPkNamedEntityCfg<TNamedEntity, TId> : DbAutoGeneratedPkEntityCfgBase<TNamedEntity, TId>
        where TNamedEntity : NamedEntityBase<TId>
        where TId : struct
    {
        public DbAutoGeneratedPkNamedEntityCfg(EntityTypeBuilder<TNamedEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedPkNamedEntityCfg<TNamedEntity, TId, TValueGenerator> : ClientAutoGeneratedPkEntityCfgBase<TNamedEntity, TId, TValueGenerator>
        where TNamedEntity : NamedEntityBase<TId>
        where TValueGenerator : ValueGenerator
    {
        public ClientAutoGeneratedPkNamedEntityCfg(EntityTypeBuilder<TNamedEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedStringPkNamedEntityCfg<TNamedEntity> : ClientAutoGeneratedStringPkEntityCfgBase<TNamedEntity>
        where TNamedEntity : NamedEntityBase<string>
    {
        public ClientAutoGeneratedStringPkNamedEntityCfg(EntityTypeBuilder<TNamedEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TNamedEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Name).IsRequired(this.IsNameRequired);
        }
    }
}
