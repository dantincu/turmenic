using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Turmenic.DataAccess.EntityFrameworkCore.Entities;

namespace Turmenic.DataAccess.EntityFrameworkCore.Config
{
    public abstract class EntityCfgBase
    {
        public abstract void Configure();
    }

    public abstract class EntityCfgBase<TEntity, TEntityId> : EntityCfgBase where TEntity : EntityBase<TEntityId>
    {
        protected readonly EntityTypeBuilder<TEntity> EntityTypeBuilder;

        public EntityCfgBase(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            this.EntityTypeBuilder = entityTypeBuilder;
        }

        public override void Configure()
        {
            this.Configure(this.EntityTypeBuilder);
        }

        protected abstract void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder);
    }

    public abstract class DefaultPkEntityCfgBase<TEntity, TEntityId> : EntityCfgBase<TEntity, TEntityId> where TEntity : EntityBase<TEntityId>
    {
        public DefaultPkEntityCfgBase(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            entityTypeBuilder.HasKey(e => e.Id);
        }
    }

    public abstract class CustomGeneratedPkEntityCfgBase<TEntity, TEntityId> : DefaultPkEntityCfgBase<TEntity, TEntityId> where TEntity : EntityBase<TEntityId>
    {
        public CustomGeneratedPkEntityCfgBase(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Id).ValueGeneratedNever();
        }
    }

    public abstract class DbAutoGeneratedPkEntityCfgBase<TEntity, TEntityId> : DefaultPkEntityCfgBase<TEntity, TEntityId>
        where TEntity : EntityBase<TEntityId>
        where TEntityId : struct
    {
        public DbAutoGeneratedPkEntityCfgBase(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Id).ValueGeneratedOnAdd();
        }
    }

    public abstract class ClientAutoGeneratedPkEntityCfgBase<TEntity, TId, TPkValueGenerator>
        : DefaultPkEntityCfgBase<TEntity, TId>
        where TEntity : EntityBase<TId>
        where TPkValueGenerator : ValueGenerator
    {
        public ClientAutoGeneratedPkEntityCfgBase(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.Id).HasValueGenerator<TPkValueGenerator>().ValueGeneratedOnAdd();
        }
    }

    public abstract class ClientAutoGeneratedStringPkEntityCfgBase<TEntity>
        : ClientAutoGeneratedPkEntityCfgBase<TEntity, string, StringPkValueGenerator>
        where TEntity : EntityBase<string>
    {
        public ClientAutoGeneratedStringPkEntityCfgBase(EntityTypeBuilder<TEntity> entityTypeBuilder) : base(entityTypeBuilder)
        {
        }
    }
}
