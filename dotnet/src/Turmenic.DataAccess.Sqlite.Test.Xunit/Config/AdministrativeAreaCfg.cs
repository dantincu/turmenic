using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Turmenic.DataAccess.EntityFrameworkCore.Config;
using Turmenic.DataAccess.EntityFrameworkCore.EntityConfigurators;
using Turmenic.DataAccess.Sqlite.Test.Xunit.DataModels;

namespace Turmenic.DataAccess.Sqlite.Test.Xunit.Config
{
    public class AdministrativeAreaCfg : DbAutoGeneratedPkNamedEntityI18nCfg<AdministrativeArea, int, AdministrativeAreaName, int, AdministrativeAreaCfgOpts>
    {
        public AdministrativeAreaCfg(
            EntityTypeBuilder<AdministrativeArea> entityTypeBuilder,
            AdministrativeAreaCfgOpts entityCfgOptions) : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected override void Configure(EntityTypeBuilder<AdministrativeArea> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.HasOne(e => e.AdministrativeAreaType).WithMany().HasForeignKey(e => e.AdministrativeAreaTypeId).IsRequired();
            entityTypeBuilder.HasOne(e => e.County).WithMany().HasForeignKey(e => e.CountyId).IsRequired(false);
            entityTypeBuilder.HasOne(e => e.State).WithMany().HasForeignKey(e => e.StateId).IsRequired(false);
            entityTypeBuilder.HasOne(e => e.MetropolitanArea).WithMany().HasForeignKey(e => e.MetropolitanAreaId).IsRequired(false);
        }
    }

    public class AdministrativeAreaCfgOpts : NamedEntityI18nCfgOpts<AdministrativeArea, int, AdministrativeAreaName, int>
    {
    }

    public class AdministrativeAreaNameCfg : DefaultPkEntityNameI18nCfg<AdministrativeArea, int, AdministrativeAreaName, int, AdministrativeAreaNameCfgOpts>
    {
        public AdministrativeAreaNameCfg(
            EntityTypeBuilder<AdministrativeAreaName> entityTypeBuilder,
            AdministrativeAreaNameCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }
    }

    public class AdministrativeAreaNameCfgOpts : EntityNameI18nCfgOpts<AdministrativeArea, int, AdministrativeAreaName, int>
    {
    }
}
