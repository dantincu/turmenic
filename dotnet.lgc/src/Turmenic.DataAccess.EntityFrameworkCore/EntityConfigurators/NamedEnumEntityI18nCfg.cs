using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Turmenic.DataAccess.EntityFrameworkCore.Config;
using Turmenic.DataAccess.EntityFrameworkCore.Entities;

namespace Turmenic.DataAccess.EntityFrameworkCore.EntityConfigurators
{
    public class DefaultPkNamedEnumEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts>
        : DefaultPkEnumEntityCfg<TEntity, TEntityId, TCfgOpts>
        where TEntity : NamedEnumEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TCfgOpts : NamedEnumEntityI18nCfgOpts<TEntity, TEntityId, TEntityName, TEntityNameId>
    {
        public DefaultPkNamedEnumEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEnumEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class CustomGeneratedPkNamedEnumEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts>
        : CustomGeneratedPkEnumEntityCfg<TEntity, TEntityId, TCfgOpts>
        where TEntity : NamedEnumEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TCfgOpts : NamedEnumEntityI18nCfgOpts<TEntity, TEntityId, TEntityName, TEntityNameId>
    {
        public CustomGeneratedPkNamedEnumEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEnumEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class DbAutoGeneratedPkNamedEnumEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts>
        : DbAutoGeneratedPkEnumEntityCfg<TEntity, TEntityId, TCfgOpts>
        where TEntity : NamedEnumEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityId : struct
        where TCfgOpts : NamedEnumEntityI18nCfgOpts<TEntity, TEntityId, TEntityName, TEntityNameId>
    {
        public DbAutoGeneratedPkNamedEnumEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEnumEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedPkNamedEnumEntityI18nCfg<TEntity, TEntityId, TEntityName, TEntityNameId, TCfgOpts, TValueGenerator>
        : ClientAutoGeneratedPkEnumEntityCfg<TEntity, TEntityId, TCfgOpts, TValueGenerator>
        where TEntity : NamedEnumEntityI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TCfgOpts : NamedEnumEntityI18nCfgOpts<TEntity, TEntityId, TEntityName, TEntityNameId>
        where TValueGenerator : ValueGenerator
    {
        public ClientAutoGeneratedPkNamedEnumEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEnumEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }

    public class ClientAutoGeneratedStringPkNamedEnumEntityI18nCfg<TEntity, TEntityName, TEntityNameId, TCfgOpts>
        : ClientAutoGeneratedStringPkEnumEntityCfg<TEntity, TCfgOpts>
        where TEntity : NamedEnumEntityI18nBase<TEntity, string, TEntityName, TEntityNameId>
        where TEntityName : EnumEntityNameI18nBase<TEntity, string, TEntityName, TEntityNameId>
        where TCfgOpts : NamedEnumEntityI18nCfgOpts<TEntity, string, TEntityName, TEntityNameId>
    {
        public ClientAutoGeneratedStringPkNamedEnumEntityI18nCfg(
            EntityTypeBuilder<TEntity> entityTypeBuilder,
            TCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected virtual bool IsNameRequired => true;

        protected override void Configure(EntityTypeBuilder<TEntity> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            HelperMethods.AddNamedEnumEntityI18nConfig(
                entityTypeBuilder,
                this.EntityCfgOptions,
                this.IsNameRequired);
        }
    }
}
