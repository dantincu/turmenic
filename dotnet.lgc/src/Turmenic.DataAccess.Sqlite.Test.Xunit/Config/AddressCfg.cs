using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Turmenic.DataAccess.EntityFrameworkCore.Config;
using Turmenic.DataAccess.Sqlite.Test.Xunit.DataModels;

namespace Turmenic.DataAccess.Sqlite.Test.Xunit.Config
{
    public class AddressCfg : DbAutoGeneratedPkEntityCfgBase<Address, long, AddressCfgOpts>
    {
        public const int DEFAULT_GENERIC_CODE_MAX_LENGTH = 5;
        public const int POSTAL_CODE_MAX_LENGTH = 10;

        public AddressCfg(EntityTypeBuilder<Address> entityTypeBuilder, AddressCfgOpts entityCfgOptions)
            : base(entityTypeBuilder, entityCfgOptions)
        {
        }

        protected override void Configure(EntityTypeBuilder<Address> entityTypeBuilder)
        {
            base.Configure(entityTypeBuilder);

            entityTypeBuilder.Property(e => e.StreetName).IsRequired(false).HasMaxLength(
                EntityFrameworkCore.Config.ConstantValues.DEFAULT_ENTITY_NAME_FIELD_MAX_LENGTH);

            entityTypeBuilder.Property(e => e.BuildingFloorName).IsRequired(false).HasMaxLength(
                EntityFrameworkCore.Config.ConstantValues.DEFAULT_ENTITY_NAME_FIELD_MAX_LENGTH);

            entityTypeBuilder.Property(e => e.AddressDetails).IsRequired(false).HasMaxLength(
                EntityFrameworkCore.Config.ConstantValues.DEFAULT_ENTITY_LONG_TEXT_FIELD_MAX_LENGTH);

            entityTypeBuilder.Property(e => e.BuildingFloorNumber).IsRequired(false);

            entityTypeBuilder.Property(e => e.StreetNumber).IsRequired(false).HasMaxLength(DEFAULT_GENERIC_CODE_MAX_LENGTH);
            entityTypeBuilder.Property(e => e.BuildingNumber).IsRequired(false).HasMaxLength(DEFAULT_GENERIC_CODE_MAX_LENGTH);
            entityTypeBuilder.Property(e => e.BuildingEntranceNumber).IsRequired(false).HasMaxLength(DEFAULT_GENERIC_CODE_MAX_LENGTH);
            entityTypeBuilder.Property(e => e.ApartmentNumber).IsRequired(false).HasMaxLength(DEFAULT_GENERIC_CODE_MAX_LENGTH);

            entityTypeBuilder.Property(e => e.PostalCode).IsRequired(false).HasMaxLength(POSTAL_CODE_MAX_LENGTH);

            entityTypeBuilder.HasOne(e => e.AdministrativeArea).WithMany().HasForeignKey(e => e.AdministrativeAreaId).IsRequired(false);
            entityTypeBuilder.HasOne(e => e.AdministrativeSubdivision).WithMany().HasForeignKey(e => e.AdministrativeSubdivisionId).IsRequired(false);
            entityTypeBuilder.HasOne(e => e.AdministrativeRegion).WithMany().HasForeignKey(e => e.AdministrativeRegionId).IsRequired(false);
            entityTypeBuilder.HasOne(e => e.Country).WithMany().HasForeignKey(e => e.CountryId).IsRequired(false);
        }
    }

    public class AddressCfgOpts : EntityCfgOpts<Address, long>
    {
    }
}
